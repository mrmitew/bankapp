plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'androidx.navigation.safeargs.kotlin'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'io.github.jmatsu.license-list'
}

android {
    namespace 'com.github.mrmitew.bankapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.github.mrmitew.bankapp"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
        }
    }

    dataBinding {
        enabled = true
    }

    spotbugs {
        ignoreFailures = false
        showStackTraces = false
        showProgress = true
//        effort = 'default'
//        reportLevel = 'default'
//        visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
//        omitVisitors = [ 'FindNonShortCircuit' ]
        reportsDir = file("$buildDir/reports/spotbugs")
//        includeFilter = file("include.xml")
        excludeFilter = file("../config/quality/spotbugs-excludes.xml")
//        baselineFile = file("baseline.xml")
//        onlyAnalyze = [ 'com.foobar.MyClass', 'com.foobar.mypkg.*' ]
//        maxHeapSize = '1g'
//        extraArgs = [ '-nested:false' ]
//        jvmArgs = [ '-Duser.language=ja' ]
    }

    detekt {
        buildUponDefaultConfig = true // preconfigure defaults
        // TODO
//        allRules = false // activate all available (even unstable) rules.
//        config.setFrom("$projectDir/config/detekt.yml") // point to your custom config defining rules to run, overwriting default behavior
//        baseline = file("$projectDir/config/baseline.xml") // a way of suppressing issues before introducing detekt
        reports {
            html.required.set(true) // observe findings in your browser with structure and code snippets
            xml.required.set(true) // checkstyle like format mainly for integrations like Jenkins
            txt.required.set(true) // similar to the console output, contains issue signature to manually edit baseline files
            sarif.required.set(true) // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with GitHub Code Scanning
            md.required.set(true) // simple Markdown format
        }
    }

    /**
     * The basic management cycle is the below:
     *
     * 1. Run ./gradlew validate<Variant>LicenseList
     * 2. Run merge<Variant>LicenseList to reflect the current artifacts if failed.
     * 3. Run ./gradlew inspect<Variant>LicenseList
     * 4. Modify artifact-definition.yml based on the inspection report above.
     * - You may want to modify .artifactignore to exclude several artifacts.
     * - If so, please go to Step2 after updating .artifactignore to reflect the ignore configurations.
     * 5. And also, modify license-catalog.yml as well.
     * 6. Go back to Step1 until no issue is found.
     */
    licenseList {
        defaultVariant = "release"

        // The filter pattern used for ignore feature (regex|glob). regex is default.
        ignoreFormat = "regex"

        variants {
            // you can declare the configuration for each variants
            create("release") {
                // A directory that contains artifact-definition.yml, license-catalog.yml and .artifactignore
                baseDir = file("../licenses/")

                // options for the management file
                assembly {
                    // management file format (json|yaml)
                    format = "yaml"

                    // the style of the managed content (structured|flatten)
                    style = "structured"

                    // whether or not artifacts are grouped by scopes like `implementation`
                    groupByScopes = true

                    // Rarely used. See Tips/Custom configurations
                    // optional
//                    additionalScopes += setOf("customImplConfiguration")

                    // Rarely used. See Tips/WearApp
                    // optional
//                    targetConfigurations += setOf("wearApp")
                }

                // options for the report file html|json
                visualization {
                    format = "html" // html by default

                    // the embedded template will be used by default
//                    htmlTemplateDir = file("</where/plugin/find/for/html-template>")

                    // To support free maker's breaking changes. rarely used.
//                    freeMakerVersion = "<version string>"

                    // `<variant>/assets` is the default location
//                    outputDir = file("</where/plugin/generate/file/to>")
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0"

    // UI
    implementation "androidx.appcompat:appcompat:1.7.0-alpha03"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.google.android.material:material:1.11.0-alpha02"
    implementation "androidx.annotation:annotation:1.7.0"
    implementation "androidx.recyclerview:recyclerview:1.3.1"

    implementation "androidx.core:core-ktx:1.12.0"

    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    def room_version = "2.5.2"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "com.commonsware.cwac:saferoom.x:1.0.2"

    def paging_version = "3.2.1"
    implementation "androidx.paging:paging-runtime:$paging_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation "androidx.paging:paging-common:$paging_version"
    implementation "androidx.paging:paging-common-ktx:$paging_version"

    def koin_version = "3.4.3"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-android-compat:$koin_version"
    implementation "io.insert-koin:koin-core:$koin_version"

    def coroutines_version = "1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    def navigation_version = "2.7.2"
    implementation "androidx.navigation:navigation-common-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-runtime-ktx:$navigation_version"

    // Security
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    // Quality
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-rules-libraries:1.23.1'
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-rules-ruleauthors:1.23.1'
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-formatting:1.23.1'

    // Testing
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'io.mockk:mockk:1.13.5'
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
